import mongoose from "mongoose";
import { RegisterStatus } from "../../../core/utils/enums";
import { VRoomsIcon } from "../../../core/utils/interfaceces";
export interface IAppConfig {
    _id: string;
    configVersion: number;
    enableAds: boolean;
    feedbackEmail: string;
    allowWebLogin: boolean;
    allowMobileLogin: boolean;
    allowCreateGroup: boolean;
    allowCreateBroadcast: boolean;
    allowMessaging: boolean;
    allowSendMedia: boolean;
    allowDesktopLogin: boolean;
    privacyUrl: string;
    googlePayUrl: string;
    webChatUrl: string;
    windowsStoreUrl: string;
    macStoreUrl: string;
    appleStoreUrl: string;
    appName: string;
    maxExpireEmailTime: number;
    userRegisterStatus: RegisterStatus;
    callTimeout: number;
    maxGroupMembers: number;
    maxBroadcastMembers: number;
    maxChatMediaSize: number;
    backendVersion?: string;
    maxForward: number;
    allowCall: boolean;
    roomIcons: VRoomsIcon;
    groupIcon: string;
    supportIcon: string;
    broadcastIcon: string;
    userIcon: string;
}
export declare const AppConfigSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    configVersion: number;
    backendVersion: string;
    enableAds: boolean;
    feedbackEmail: string;
    allowWebLogin: boolean;
    allowMobileLogin: boolean;
    allowCreateGroup: boolean;
    appName: string;
    allowCreateBroadcast: boolean;
    allowDesktopLogin: boolean;
    privacyUrl: string;
    googlePayUrl: string;
    webChatUrl: string;
    windowsStoreUrl: string;
    macStoreUrl: string;
    appleStoreUrl: string;
    maxExpireEmailTime: number;
    userRegisterStatus: string;
    userIcon: string;
    callTimeout: number;
    roomIcons: any;
    allowMessaging: boolean;
    allowSendMedia: boolean;
    maxGroupMembers: number;
    maxBroadcastMembers: number;
    maxForward: number;
    maxChatMediaSize: number;
    allowCall: boolean;
    groupIcon: string;
    supportIcon: string;
    broadcastIcon: string;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    configVersion: number;
    backendVersion: string;
    enableAds: boolean;
    feedbackEmail: string;
    allowWebLogin: boolean;
    allowMobileLogin: boolean;
    allowCreateGroup: boolean;
    appName: string;
    allowCreateBroadcast: boolean;
    allowDesktopLogin: boolean;
    privacyUrl: string;
    googlePayUrl: string;
    webChatUrl: string;
    windowsStoreUrl: string;
    macStoreUrl: string;
    appleStoreUrl: string;
    maxExpireEmailTime: number;
    userRegisterStatus: string;
    userIcon: string;
    callTimeout: number;
    roomIcons: any;
    allowMessaging: boolean;
    allowSendMedia: boolean;
    maxGroupMembers: number;
    maxBroadcastMembers: number;
    maxForward: number;
    maxChatMediaSize: number;
    allowCall: boolean;
    groupIcon: string;
    supportIcon: string;
    broadcastIcon: string;
}>> & mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    configVersion: number;
    backendVersion: string;
    enableAds: boolean;
    feedbackEmail: string;
    allowWebLogin: boolean;
    allowMobileLogin: boolean;
    allowCreateGroup: boolean;
    appName: string;
    allowCreateBroadcast: boolean;
    allowDesktopLogin: boolean;
    privacyUrl: string;
    googlePayUrl: string;
    webChatUrl: string;
    windowsStoreUrl: string;
    macStoreUrl: string;
    appleStoreUrl: string;
    maxExpireEmailTime: number;
    userRegisterStatus: string;
    userIcon: string;
    callTimeout: number;
    roomIcons: any;
    allowMessaging: boolean;
    allowSendMedia: boolean;
    maxGroupMembers: number;
    maxBroadcastMembers: number;
    maxForward: number;
    maxChatMediaSize: number;
    allowCall: boolean;
    groupIcon: string;
    supportIcon: string;
    broadcastIcon: string;
}> & {
    _id: mongoose.Types.ObjectId;
}>;
