"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneSignalAppClient = void 0;
const axios_1 = require("axios");
const errors_1 = require("./errors");
const oneSignalBaseClient_1 = require("./oneSignalBaseClient");
class OneSignalAppClient extends oneSignalBaseClient_1.OneSignalBaseClient {
    constructor(appId, restApiKey) {
        super();
        this.appId = appId;
        this.restApiKey = restApiKey;
    }
    //  The Create Notification method is used when you want your server to programmatically send notifications
    //  or emails to a segment or individual users. You may target users in one of three ways
    //  using this method: by Segment, by Filter, or by Device. At least one targeting parameter must be specified.
    //  https://documentation.onesignal.com/reference#create-notification
    createNotification(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            const body = Object.assign(Object.assign({}, input), { app_id: this.appId });
            return yield this.httpClient.post('/notifications', body).then((result) => result.data);
        });
    }
    //  View the details of a single notification
    //  Requires your OneSignal App's REST API Key, available in Keys & IDs.
    //  https://documentation.onesignal.com/reference#view-notification
    viewNotification(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient
                .get(`/notifications/${input.id}?app_id=${this.appId}`)
                .then((result) => result.data);
        });
    }
    //  View the details of multiple notifications
    //  Requires your OneSignal App's REST API Key, available in Keys & IDs.
    //  https://documentation.onesignal.com/reference#view-notifications
    viewNotifications(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient
                .get(`/notifications?app_id=${this.appId}&limit=${input.limit}&offset=${input.offset}&kind=${input.kind}`)
                .then((result) => result.data);
        });
    }
    //  Used to stop a scheduled or currently outgoing notification.
    //  https://documentation.onesignal.com/reference#cancel-notification
    cancelNotification(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient
                .delete(`/notifications/${input.id}?app_id=${this.appId}`)
                .then((result) => result.data);
        });
    }
    //  Register a new device to one of your OneSignal apps
    //  https://documentation.onesignal.com/reference#add-a-device
    createDevice(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            const body = Object.assign(Object.assign({}, input), { app_id: this.appId });
            return yield this.httpClient.post(`/players`, body).then((result) => result.data);
        });
    }
    //  Update an existing device in one of your OneSignal apps
    //  https://documentation.onesignal.com/reference#edit-device
    updateDevice(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            const { id } = input, body = __rest(input, ["id"]);
            return yield this.httpClient.put(`/players/${id}`, body).then((result) => result.data);
        });
    }
    //  View the details of an existing device in one of your OneSignal apps
    //  https://documentation.onesignal.com/reference#view-device
    viewDevice(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient
                .get(`/players/${input.id}?app_id=${this.appId}`)
                .then((result) => result.data);
        });
    }
    //  View the details of multiple devices in one of your OneSignal apps
    //  https://documentation.onesignal.com/reference#view-devices
    viewDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient.get(`/players?app_id=${this.appId}`).then((result) => result.data);
        });
    }
    //  This method should be called when a device opens your app after they are already registered.
    //  This method will automatically increment the player's session_count,
    //  and should also be used to update any fields that may have changed (such as language or timezone).
    //  https://documentation.onesignal.com/reference#new-session
    newSession(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            return yield this.httpClient
                .post(`/players/${input.deviceId}/on_session`)
                .then((result) => result.data);
        });
    }
    //  Track when users open a notification
    //  https://documentation.onesignal.com/reference#track-open
    trackOpen(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkRestApiKey();
            const { notificationId } = input, rest = __rest(input, ["notificationId"]);
            const body = Object.assign(Object.assign({}, rest), { app_id: this.appId });
            return yield this.httpClient
                .put(`/notifications/${notificationId}`, body)
                .then((result) => result.data);
        });
    }
    createHttpClient() {
        const httpClient = axios_1.default.create({ baseURL: this.BaseUrl });
        httpClient.interceptors.request.use((config) => {
            if (config.headers)
                config.headers.Authorization = `Basic ${this.restApiKey}`;
            return config;
        }, (err) => Promise.reject(err));
        return httpClient;
    }
    checkRestApiKey() {
        if (!this.restApiKey) {
            throw new errors_1.OneSignalError('You must define "restApiKey" on OneSignalClient');
        }
    }
}
exports.OneSignalAppClient = OneSignalAppClient;
