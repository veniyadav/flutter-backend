"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneSignalUserClient = void 0;
const oneSignalBaseClient_1 = require("./oneSignalBaseClient");
const axios_1 = require("axios");
const errors_1 = require("./errors");
class OneSignalUserClient extends oneSignalBaseClient_1.OneSignalBaseClient {
    constructor(userAuthKey) {
        super();
        this.userAuthKey = userAuthKey;
    }
    //  View the details of all of your current OneSignal apps
    //  https://documentation.onesignal.com/reference#view-apps-apps
    viewApps() {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkUserAuthKey();
            return yield this.httpClient.get('/apps').then((result) => result.data);
        });
    }
    //  View the details of a single OneSignal app
    //  https://documentation.onesignal.com/reference#view-an-app
    viewApp(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkUserAuthKey();
            return yield this.httpClient.get(`/apps/${input.id}`).then((result) => result.data);
        });
    }
    //  Creates a new OneSignal app
    //  https://documentation.onesignal.com/reference#create-an-app
    createApp(input) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkUserAuthKey();
            return yield this.httpClient.post('/apps', input).then((result) => result.data);
        });
    }
    //  This method can be used to update the name or configuration settings of one of your existing apps.
    //  https://documentation.onesignal.com/reference#update-an-app
    updateApp(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = input, body = __rest(input, ["id"]);
            this.checkUserAuthKey();
            return yield this.httpClient.put(`/apps/${id}`, body).then((result) => result.data);
        });
    }
    createHttpClient() {
        const httpClient = axios_1.default.create({ baseURL: this.BaseUrl });
        httpClient.interceptors.request.use((config) => {
            if (config.headers)
                config.headers.Authorization = `Basic ${this.userAuthKey}`;
            return config;
        }, (err) => Promise.reject(err));
        return httpClient;
    }
    checkUserAuthKey() {
        if (!this.userAuthKey) {
            throw new errors_1.OneSignalError('You must define "userAuthKey" on OneSignalUserClient');
        }
    }
}
exports.OneSignalUserClient = OneSignalUserClient;
