import { ICancelNotificationInput, ICancelNotificationResult, ICreateNotificationResult, INotification, ITrackOpenInput, ITrackOpenResult, IViewNotificationInput, IViewNotificationResult, IViewNotificationsInput, IViewNotificationsResult } from './dto/notifications';
import { ICreateDeviceInput, ICreateDeviceResult, IUpdateDeviceInput, IUpdateDeviceResult, IViewDeviceInput, IViewDeviceResult, IViewDevicesResult } from './dto/devices';
import { OneSignalBaseClient } from './oneSignalBaseClient';
import { INewSessionInput, INewSessionResult } from './dto/session';
export declare class OneSignalAppClient extends OneSignalBaseClient {
    private readonly appId;
    private readonly restApiKey;
    constructor(appId: string, restApiKey: string);
    createNotification(input: INotification): Promise<ICreateNotificationResult>;
    viewNotification(input: IViewNotificationInput): Promise<IViewNotificationResult>;
    viewNotifications(input: IViewNotificationsInput): Promise<IViewNotificationsResult>;
    cancelNotification(input: ICancelNotificationInput): Promise<ICancelNotificationResult>;
    createDevice(input: ICreateDeviceInput): Promise<ICreateDeviceResult>;
    updateDevice(input: IUpdateDeviceInput): Promise<IUpdateDeviceResult>;
    viewDevice(input: IViewDeviceInput): Promise<IViewDeviceResult>;
    viewDevices(): Promise<IViewDevicesResult>;
    newSession(input: INewSessionInput): Promise<INewSessionResult>;
    trackOpen(input: ITrackOpenInput): Promise<ITrackOpenResult>;
    protected createHttpClient(): import("axios").AxiosInstance;
    private checkRestApiKey;
}
